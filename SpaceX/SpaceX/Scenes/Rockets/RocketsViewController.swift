//
//  RocketsViewController.swift
//  SpaceX
//
//  Created by Canberk Bibican on 16.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// ResponseModel -> ViewModel -> ViewController -> Service -> Worker -> Presenter -> Interactor -> Router

protocol RocketsDisplayLogic: AnyObject {
    func displayGetRocketList(viewModel: Rockets.GetRocketList.ViewModel)
}

class RocketsViewController: BaseViewController {

    var interactor: RocketsBusinessLogic?
    var router: (NSObjectProtocol & RocketsRoutingLogic & RocketsDataPassing)?
    var displayedRockets: [Rockets.GetRocketList.ViewModel.DisplayedRocket] = []
    @IBOutlet weak var tableView: UITableView!
    private lazy var rocketsTableView = RocketsTableView()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = RocketsInteractor()
        let presenter = RocketsPresenter()
        let router = RocketsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func initTableView() {
        tableView.delegate = rocketsTableView
        tableView.dataSource = rocketsTableView
        rocketsTableView.delegate = self
        //tableView.separatorColor = .clear
        //tableView.estimatedRowHeight = UITableView.automaticDimension
        //tableView.rowHeight = UITableView.automaticDimension
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        initTableView()
        getRocketList()
    }

    func getRocketList() {
        let request = Rockets.GetRocketList.Request()
        interactor?.getRocketList(request: request)
    }
}

extension RocketsViewController: RocketsDisplayLogic {

    func displayGetRocketList(viewModel: Rockets.GetRocketList.ViewModel) {
        displayedRockets = viewModel.displayedRockets
        rocketsTableView.update(newItemList: displayedRockets)
        tableView.reloadData()
    }

}

extension RocketsViewController: RocketsTableViewOutput{
    func onSelected(item: Rockets.GetRocketList.ViewModel.DisplayedRocket) {
        print(item)
    }
}
